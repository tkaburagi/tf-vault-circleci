workflows:
  version: 2.1
  azure-infra-provision:
    jobs:
      - validate-repo-main:
          filters:
            branches:
              only:
                - main
      - validate-repo-dev:
          filters:
            branches:
              only:
                - dev
      - terraform-test:
          requires:
            - validate-repo-main
            - validate-repo-dev
      - generate-tfc-token:
          requires:
            - terraform-test
      - generate-azure-secret:
          requires:
            - generate-tfc-token
      - provision-infra:
          requires:
            - generate-azure-secret
            - generate-tfc-token
          filters:
            branches:
              only:
                - main
      - specurative-plan:
          requires:
            - generate-azure-secret
            - generate-tfc-token
          filters:
            branches:
              only:
                - dev
version: 2.1
executors:
  tf-executor:
    docker:
      - image: hashicorp/terraform
    working_directory: /home/terraform
  vault-executor:
    docker:
      - image: hashicorp/vault
    working_directory: /home/vault
  general-executor:
    docker:
      - image: circleci/node:4.8.2
  circleci-executor:
    docker:
      - image: circleci/golang:1.11.1
jobs:
  validate-repo-main:
    executor: circleci-executor
    steps:
      - checkout
      - run:
          name: "Validate Changed Directory"
          command: |
            if ! bin/is_changed.sh "." -a "${CIRCLE_BRANCH}" != "main"; then
              echo "tf-azure is not changed"
              exit 1
            fi
  validate-repo-dev:
    executor: circleci-executor
    steps:
      - checkout
      - run:
          name: "Validate Changed Directory"
          command: |
            if ! bin/is_changed.sh "." -a "${CIRCLE_BRANCH}" != "dev"; then
              echo "tf-azure is not changed"
              exit 1
            fi
  terraform-test:
    executor: tf-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: mkdir workspace
      - run:
          name: "Terraform Test"
          command: |
            pwd
            apk add git
            terraform -version
            ls -ltrR
            terraform fmt -diff=true
            terraform init
            terraform validate
  generate-tfc-token:
    executor: vault-executor
    steps:
      - run: mkdir workspace
      - run:
          name: "Import TFC API Token from Vault"
          command: |
            pwd
            vault -version
            vault read -format json tfc/creds/ci-user > workspace/tf-token.json
      - persist_to_workspace:
          root: workspace
          paths:
            - tf-token.json
  generate-azure-secret:
    executor: vault-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: mkdir workspace
      - run:
          name: "Import Azure Secrets from Vault"
          command: |
            pwd
            apk add jq terraform
            vault read -format json azure/creds/contributor > workspace/client-creds.json
            vault kv get -format json secret/azure/environment > workspace/env-creds.json

            export TFC_TOKEN=$(cat /tmp/workspace/tf-token.json | jq -r '.data.token')
            export ARM_CLIENT_ID=$(cat workspace/client-creds.json | jq -r '.data.client_id')
            export ARM_CLIENT_SECRET=$(cat workspace/client-creds.json | jq -r '.data.client_secret')
            export ARM_SUBSCRIPTION_ID=$(cat workspace/env-creds.json | jq -r '.data.data.subscription_id')
            export ARM_TENANT_ID=$(cat workspace/env-creds.json | jq -r '.data.data.tenant_id')

            cd tf-tfc
            ls -ltr
            cat \<< EOF > .terraformrc
            credentials "app.terraform.io" {
               token = "${TFC_TOKEN}"
            }
            EOF

            export TF_CLI_CONFIG_FILE=.terraformrc
            export TFE_TOKEN=${TFC_TOKEN}
            export TF_VAR_workspace_id=${WS_ID}
            export TF_VAR_arm_client_id=${ARM_CLIENT_ID}
            export TF_VAR_arm_client_secret=${ARM_CLIENT_SECRET}
            export TF_VAR_arm_tenant_id=${ARM_TENANT_ID}
            export TF_VAR_arm_sub_id=${ARM_SUBSCRIPTION_ID}

            terraform init
            terraform destroy -auto-approve
            terraform apply -auto-approve

            rm ../workspace/client-creds.json
            rm ../workspace/env-creds.json
  provision-infra:
    executor: general-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Make TFC"
          command: |
            export TFC_TOKEN=$(cat /tmp/workspace/tf-token.json | jq -r '.data.token')

            curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/workspaces/${WS_ID} | jq -r '.data.relationships.organization.data.id' > org-name

            curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/workspaces/${WS_ID} | jq -r '.data.attributes.name' > ws-name

            WS_NAME=$(cat ws-name)
            ORG_NAME=$(cat org-name)

            cat \<< EOF > main.tf
            terraform {
              backend "remote" {
                organization = "${ORG_NAME}"
                workspaces {
                  name = "${WS_NAME}"
                }
              }
            }

            provider "azurerm" {
              features {}
            }
            EOF

            cat azure.tf

            ls -ltrR
            tar -zcvf tf.tar.gz -C . main.tf output.tf variables.tf azure.tf
            echo '{"data":{"type":"configuration-version"}}' > create_config_version.json

            export UPLOAD_URL=($(curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data @create_config_version.json \
              https://app.terraform.io/api/v2/workspaces/${WS_ID}/configuration-versions | jq -r '.data.attributes."upload-url"'))

            curl \
            --header "Content-Type: application/octet-stream" \
            --request PUT \
            --data-binary @tf.tar.gz \
              ${UPLOAD_URL}

            rm ./create_config_version.json
            rm ./tf.tar.gz
            rm /tmp/workspace/*.json
            rm *.tf
            ls -ltrR /tmp/workspace
  specurative-plan:
    executor: tf-executor
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: "Make TFC"
          command: |
            apk add jq curl
            export TFC_TOKEN=$(cat /tmp/workspace/tf-token.json | jq -r '.data.token')

            curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/workspaces/${WS_ID} | jq -r '.data.relationships.organization.data.id' > org-name

            curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
              https://app.terraform.io/api/v2/workspaces/${WS_ID} | jq -r '.data.attributes.name' > ws-name

            WS_NAME=$(cat ws-name)
            ORG_NAME=$(cat org-name)

            cat \<< EOF > main.tf
            terraform {
              backend "remote" {
                organization = "${ORG_NAME}"
                workspaces {
                  name = "${WS_NAME}"
                }
              }
            }

            provider "azurerm" {
              features {}
            }
            EOF

            cat azure.tf
            ls -ltrR
            tar -zcvf tf.tar.gz -C . main.tf output.tf variables.tf azure.tf
            echo '{"data":{"type":"configuration-versions","attributes":{"auto-queue-runs":false,"speculative":true}}}' > ./create_config_version.json

            curl \
              --header "Authorization: Bearer ${TFC_TOKEN}" \
              --header "Content-Type: application/vnd.api+json" \
              --request POST \
              --data @create_config_version.json \
              https://app.terraform.io/api/v2/workspaces/${WS_ID}/configuration-versions > output.json

            export UPLOAD_URL=$(cat output.json | jq -r '.data.attributes."upload-url"')
            export CV_ID=$(cat output.json | jq -r '.data."id"')

            curl \
              --header "Content-Type: application/octet-stream" \
              --request PUT \
              --data-binary @tf.tar.gz \
              $UPLOAD_URL

            rm ./create_config_version.json
            rm ./tf.tar.gz

            cat \<< EOF > payload.json
            {
              "data": {
                "attributes": {
                  "message": "Specurative Plan"
                },
                "type": "runs",
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "${WS_ID}"
                    }
                  },
                  "configuration-version": {
                    "data": {
                      "type": "configuration-versions",
                      "id": "${CV_ID}"
                    }
                  }
                }
              }
            }
            EOF

            curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data @payload.json \
            https://app.terraform.io/api/v2/runs | jq -r '.data.id' > run-id

            curl \
            --header "Authorization: Bearer ${TFC_TOKEN}" \
            --header "Content-Type: application/vnd.api+json" \
            https://app.terraform.io/api/v2/workspaces/${WS_ID} | jq -r '.data.attributes.name' > ws-name

            ORG_NAME=$(cat org-name)
            RUN_ID=$(cat run-id)
            WS_NAME=$(cat ws-name)
            echo "RUN URL: https://app.terraform.io/app/${ORG_NAME}/workspaces/${WS_NAME}/runs/${RUN_ID}"